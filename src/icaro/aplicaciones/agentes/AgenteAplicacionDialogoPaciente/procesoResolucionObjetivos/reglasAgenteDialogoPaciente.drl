import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.PerformativaUsuario;
import icaro.infraestructura.entidadesBasicas.comunicacion.*
import icaro.aplicaciones.agentes.AgenteAplicacionDialogoPaciente.objetivos.*;
import icaro.aplicaciones.informacion.gestionCitas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionDialogoPaciente.tareas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionDialogoPaciente.tools.*;
import icaro.aplicaciones.recursos.recursoCalendario.*;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;
global ItfUsoRecursoCalendario recursoCalendario;

rule "crear foco usuario"
 when 
 	notif:NotificacionPaciente(identInterlc:identNotificador)
 	not( exists( FocoUsuario(usuario == identInterlc ) ))
 then
 	//Establezco el foco del usuario
 	FocoUsuario fu = new FocoUsuario(identInterlc);
 	insert(fu);
 	 recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Solicitud peticion de cita"
 when 	
 	notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotifPaciente.inicioPeticion);
	fu:FocoUsuario(usuario == identInterlc, foco == null)
 then 
 	Tarea tareadist = gestorTareas.crearTarea(NotificarObjetivo.class);
    tareadist.ejecutar(identInterlc,notif,"PACIENTE"); 	
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
 	tarea.ejecutar(identInterlc,conversacionPaciente.obtenerInfoCita1dameDatos);
 	Objetivo cita = new CrearCita();
 	cita.setobjectReferenceId(identInterlc);
 	Objetivo idmedico = new IdentificarMedico();
 	idmedico.setobjectReferenceId(identInterlc);
 	Objetivo idfecha = new ObtenerFechaCita();
 	idfecha.setobjectReferenceId(identInterlc);
 	CitaMedica citamed = new CitaMedica();
 	citamed.usuario = identInterlc;
 	insert(citamed);
 	fu.setFoco(cita);
 	insert(cita);
 	insert(idmedico);
 	insert(idfecha);
 	retract(notif);
 	update(fu);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Obtener nombre medico"
 when
 	notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotifPaciente.nombre,  msgg:mensajeNotificacion );
 	nom:IdentificarMedico(state == Objetivo.PENDING, objectReferenceId == identInterlc)
 	obj:CrearCita(state == Objetivo.PENDING, objectReferenceId == identInterlc)
	fu:FocoUsuario(usuario == identInterlc, foco == obj)
	cm:CitaMedica(usuario == identInterlc)
 then
 	nom.setSolved();
 	cm.nombreMedico = msgg;
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
 	tarea.ejecutar(identInterlc,conversacionPaciente.obtenerInfoCita3medicoRegistrado);
 	update(nom);
 	retract(notif);
 	 recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Obtener fecha"
 when
 	notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotifPaciente.fecha,  msgg:mensajeNotificacion );
 	nom:ObtenerFechaCita(state == Objetivo.PENDING, objectReferenceId == identInterlc)
 	obj:CrearCita(state == Objetivo.PENDING, objectReferenceId == identInterlc)
	fu:FocoUsuario(usuario == identInterlc, foco == obj)
	cm:CitaMedica(usuario == identInterlc)
 then
 	nom.setSolved();
 	cm.fecha = msgg;
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
 	tarea.ejecutar(identInterlc,conversacionPaciente.obtenerInfoCita2fechaRegistrada);
 	update(nom);
 	retract(notif);
 	 recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Focalizar crear cita"
 when
 	ofc:ObtenerFechaCita(state == Objetivo.SOLVED, identInterlc:objectReferenceId)
 	im:IdentificarMedico(state == Objetivo.SOLVED, objectReferenceId == identInterlc)
 	cc:CrearCita(state == Objetivo.PENDING, objectReferenceId == identInterlc)
 	cm:CitaMedica(usuario == identInterlc)
 then
 	cc.setSolving();
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tarea.ejecutar(identInterlc,"Necesito que me confirmes la cita, estos datos son correctos fecha: "+cm.fecha +" , con el Medico: "+cm.nombreMedico+", estas de acuerdo?");
 	retract(ofc);
 	retract(im);
 	update(cc);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Confirmacion de cita"
 when
 	notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotifPaciente.si, msgg:mensajeNotificacion )
 	cc:CrearCita(state == Objetivo.SOLVING, objectReferenceId == identInterlc)
 then
 	
 	Objetivo confirmar = new Confirmacion();
 	confirmar.setobjectReferenceId(identInterlc);
 	confirmar.setSolving();
 	insert(confirmar);
 
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "No confirmacion de cita"
 when
 	notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotifPaciente.no, msgg:mensajeNotificacion )
 	cc:CrearCita(state == Objetivo.SOLVING, objectReferenceId == identInterlc)
 then
 	
 	Objetivo confirmar = new Confirmacion();
 	confirmar.setobjectReferenceId(identInterlc);
 	confirmar.setFailed();
 	insert(confirmar);
 
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end


rule "Establecer cita"
 when
 	obj:CrearCita(state == Objetivo.SOLVING, identInterlc:objectReferenceId)
	fu:FocoUsuario(usuario == identInterlc, foco == obj)
	cc:Confirmacion(state == Objetivo.SOLVING, objectReferenceId == identInterlc)
	cm:CitaMedica(usuario == identInterlc)
 then
 	TareaSincrona tareadist = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tareadist.ejecutar(identInterlc,conversacionPaciente.obtenerInfoCita4todoCompletado); 	
 	Tarea tareadist2 = gestorTareas.crearTarea(NotificarObjetivo.class);
    tareadist2.ejecutar(identInterlc,null,"RESET"); 
 	
 	fu.setFoco(null);
 	
 	// AQUI LLAMAREMOS AL RECURSO DE CALENDARIO Y ALMACENAMOS TODO
 	recursoCalendario.insertaCita(cm);
 	
 	update(fu);
 	retract(cm);
 	retract(cc);
 	retract(obj);
 	 recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Cancelar cita"
 when
 	obj:CrearCita(state == Objetivo.SOLVING, identInterlc:objectReferenceId)
	fu:FocoUsuario(usuario == identInterlc, foco == obj)
	cc:Confirmacion(state == Objetivo.FAILED, objectReferenceId == identInterlc)
	cm:CitaMedica(usuario == identInterlc)
 then
 	TareaSincrona tareadist = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tareadist.ejecutar(identInterlc,conversacionPaciente.obtenerInfoCita4cancelado); 	
 	Tarea tareadist2 = gestorTareas.crearTarea(NotificarObjetivo.class);
    tareadist2.ejecutar(identInterlc,null,"RESET"); 
 	
 	fu.setFoco(null);
 	
 	// AQUI LLAMAREMOS AL RECURSO DE CANLENDARIO Y ALMACENAMOS TODO
 	recursoCalendario.darBajaCita(cm);
 	 	
 	update(fu);
 	retract(cm);
 	retract(cc);
 	retract(obj);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end


// Regla para consultar las citas por parte del paciente
rule "Consultar citas, teniendo el paciente"
 when
    notif:NotificacionPaciente(identInterlc:identNotificador, tipoNotificacion == tipoNotifPaciente.consulta, msgg:mensajeNotificacion )
 then
 	// aqui habria que ir al recurso calendario para obtener las citas una a una
    String citas = recursoCalendario.consultaCitas(identInterlc);
    
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tarea.ejecutar(identInterlc,citas);
    
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end
