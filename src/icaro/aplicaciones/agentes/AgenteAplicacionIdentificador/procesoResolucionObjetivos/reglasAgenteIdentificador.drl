import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.PerformativaUsuario;
import icaro.infraestructura.entidadesBasicas.comunicacion.*
import icaro.aplicaciones.agentes.AgenteAplicacionIdentificador.objetivos.*;
import icaro.aplicaciones.informacion.gestionCitas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionIdentificador.tareas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionIdentificador.tools.*;
import icaro.aplicaciones.agentes.AgenteAplicacionDialogoPaciente.tools.*;
import icaro.aplicaciones.agentes.AgenteAplicacionDialogoMedico.tools.*;
import static icaro.aplicaciones.recursos.persistenciaUsuarios.imp.PersistenciaUsuariosImp.*;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;


rule "Creacion de los objectivos iniciales"
when 
then 
TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarInfoWorkMem.class);
    tarea.ejecutar();
recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Saludo Inicial"
when
then
   // recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Se ejecuta la tarea : SolicitarDatosAcceso",InfoTraza.NivelTraza.debug));
     TareaSincrona tarea = gestorTareas.crearTareaSincrona(SaludoInicial.class);
     tarea.ejecutar(VocabularioGestionCitas.IdentRecursoComunicacionChat);
   // recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
   // recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Saludo inicial de usuario"
 when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.saludo)
    not( exists (UsuarioContexto(usuario == identInterlc )))
 then
 	UsuarioContexto cu = new UsuarioContexto();
 	cu.usuario = identInterlc;
 	insert( cu );
 	FocoUsuario fu = new FocoUsuario(identInterlc);
 	Objetivo id = new IdentificarUsuario();
 	id.setobjectReferenceId(identInterlc);
 	insert( fu );
 	insert( id );
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tarea.ejecutar(identInterlc,conversacion.msg("saludoInicial"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end


rule "Saludo inicial descortes"
 when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion != tipoNotif.saludo)
    not( exists (UsuarioContexto(usuario == identInterlc )))
 then
 	UsuarioContexto cu = new UsuarioContexto();
 	cu.usuario = identInterlc;
 	insert( cu );
 	FocoUsuario fu = new FocoUsuario(identInterlc);
 	Objetivo id = new IdentificarUsuario();
 	id.setobjectReferenceId(identInterlc);
 	insert( fu );
 	insert( id );
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tarea.ejecutar(identInterlc,conversacion.msg("saludoInicialDescortes"));
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end


rule "Resaludar"
 when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.saludo)
   	cu:UsuarioContexto(usuario == identInterlc)
 then
  	 TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
     tarea.ejecutar(identInterlc,conversacion.msg("resaludar"));
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
     cu.actividad();
     retract(notif);
end


rule "Regla de solicitar nombre"
 when
 	
 	fc:FocoUsuario(fcuser:usuario , foco == null)
 	obj:IdentificarUsuario(state == Objetivo.PENDING ,objectReferenceId == fcuser )
 	not( exists (ObtenerNombreUsuario(objectReferenceId == fcuser)))
 then
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
  	Objetivo no = new ObtenerNombreUsuario();
  	no.setobjectReferenceId(fcuser);
  	fc.setFoco(no);
  	
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tarea.ejecutar(fcuser,conversacion.msg("solicitarNombre"));
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	update(fc);
   	insert(no);
end

rule "Regla de obtencion de nombre"
 when
	obj:ObtenerNombreUsuario(user:objectReferenceId, state == Objetivo.PENDING)
 	fc:FocoUsuario(usuario == user, foco == obj )
    notif:Notificacion(identNotificador == user, tipoNotificacion == tipoNotif.nombre, msgg:mensajeNotificacion )
    cu:UsuarioContexto(usuario == user)
 then
 	obj.setSolved();
 	cu.setNombre(msgg);
 	cu.actividad();
 	fc.setFoco(null);
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(SolicitarNombre.class);
    tarea.ejecutar(user,conversacion.msg("obtencionNombre"),msgg);
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
   	update(obj);
   	update(fc);
   	retract(notif);
end


rule "Regla de solicitud de obtener DNI"
 when
 	fc:FocoUsuario(fcuser:usuario , foco == null)
 	obj:IdentificarUsuario(state == Objetivo.PENDING ,objectReferenceId == fcuser )
 	not( exists (ObtenerDNIUsuario(objectReferenceId == fcuser)))
 	cu:UsuarioContexto(usuario == fcuser)
 then

  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
  	Objetivo ob = new ObtenerDNIUsuario();	
	ob.setobjectReferenceId(fcuser);
	insert(ob);
	fc.setFoco(ob);
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
  	if(cu.getNombre() == null){
  	   tarea.ejecutar(fcuser, conversacion.msg("peticionDNI"));	
  	}else{
  	   tarea.ejecutar(fcuser, cu.getNombre()+ ", " + conversacion.msg("solicitarDNI"));
  	}
  
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   update(obj);
   update(fc);
end

rule "Regla de obtencion de dni"
 when
 	obj:ObtenerDNIUsuario(user:objectReferenceId, state == Objetivo.PENDING)
 	fc:FocoUsuario(usuario == user, foco == obj )
    notif:Notificacion(identNotificador == user, tipoNotificacion == tipoNotif.dni, msgg:mensajeNotificacion )
    cu:UsuarioContexto(usuario == user)
 then
 	obj.setSolved();
 	cu.setDNI(msgg);
 	cu.actividad();
 	fc.setFoco(null);
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(SolicitarDNI.class);
    tarea.ejecutar(user,cu);
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	
   	update(obj);
   	update(fc);
   	retract(notif);
end

rule "Notificar desconocimiento"
 when
 	notif:Notificacion(user:identNotificador, tipoNotificacion == VocabularioGestionCitas.ExtraccionSemanticaNull )
 	fc:FocoUsuario(usuario == user)
 	cu:UsuarioContexto(usuario ==user);
 then
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(NotificarAlUsuarioSinContexto.class);
    tarea.ejecutar(fc);
    cu.actividad();
    retract(notif);
    update(fc);
    update(cu);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Finalizar la identificacion"
 when
 	ObtenerDNIUsuario(user:objectReferenceId, state == Objetivo.SOLVED);
 	ObtenerNombreUsuario(objectReferenceId == user, state == Objetivo.SOLVED)
 	obj:IdentificarUsuario(state == Objetivo.PENDING ,objectReferenceId == user )
 	cu:UsuarioContexto(usuario == user)
 	fc:FocoUsuario(usuario == user)
 then
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(UsuarioIdentificado.class);
 	tarea.ejecutar(user, cu);
 	fc.setFoco(null);
 	//TODO GUARDAR EN LA PERSISTENCIA USUARIO PARA PODER USARLA LUEGO 
 	Tarea tarea2 = gestorTareas.crearTarea(NotificarUsuarioIdentificado.class);
    tarea2.ejecutar(cu);
    insertarUsuario(user,cu);

	NotificacionObjetivo f = new NotificacionObjetivo();
	f.setTipoNotificacion(tipoNotif.objetivo);
	f.setAgente("INIT");
	f.identNotificador = user;
	insert(f);

 	obj.setSolved();
 	update(obj);
 	update(fc);
end

rule "Contexto incorrecto Luego de identificar"
 when 
   notif:Notificacion(identInterlc:identNotificador, 
    		tipoNotificacion != tipoNotifPaciente.inicioPeticion &&
    		tipoNotificacion != tipoNotifPaciente.consulta && tipoNotificacion != tipoNotif.no && 
    		tipoNotificacion != tipoNotif.saludo && tipoNotificacion != tipoNotif.despedida && tipoNotificacion != tipoNotif.si)
    //obj:DistribuirMensajes(state == Objetivo.SOLVING, objectReferenceId == identInterlc)
    fc:FocoUsuario(usuario == identInterlc, foco == null)
    cu:UsuarioContexto(usuario == identInterlc)
 then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
  	tarea.ejecutar(identInterlc,conversacion.msg("semanticoErroneo"));	
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
  	retract(notif);
end


rule "Contexto incorrecto antes de identificar"
 when 
   notif:Notificacion(identInterlc:identNotificador, 
    		tipoNotificacion != tipoNotifPaciente.inicioPeticion &&
    		tipoNotificacion != tipoNotifPaciente.consulta && tipoNotificacion != tipoNotif.no &&
    		tipoNotificacion != tipoNotif.saludo && tipoNotificacion != tipoNotif.despedida && tipoNotificacion != tipoNotif.si && tipoNotificacion != tipoNotif.dni)
    obj:ObtenerDNIUsuario(state == Objetivo.PENDING, objectReferenceId == identInterlc)
    fc:FocoUsuario(usuario == identInterlc, foco == obj)
    cu:UsuarioContexto(usuario == identInterlc)
 then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
  	tarea.ejecutar(identInterlc,conversacion.msg("semanticoErroneo"));	
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
  	retract(notif);
end


rule "Contexto incorrecto obtenerNombreUsuario"
 when 
   notif:Notificacion(identInterlc:identNotificador, 
    		tipoNotificacion != tipoNotifPaciente.inicioPeticion &&
    		tipoNotificacion != tipoNotifPaciente.consulta && tipoNotificacion != tipoNotif.no &&
    		tipoNotificacion != tipoNotif.saludo && tipoNotificacion != tipoNotif.despedida && tipoNotificacion != tipoNotif.si && tipoNotificacion != tipoNotif.nombre)
    obj:ObtenerNombreUsuario(state == Objetivo.PENDING, objectReferenceId == identInterlc)
    fc:FocoUsuario(usuario == identInterlc, foco == obj)
    cu:UsuarioContexto(usuario == identInterlc)
 then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
  	tarea.ejecutar(identInterlc,conversacion.msg("semanticoErroneo"));	
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
  	retract(notif);
end


rule "Mensaje confirmacion solicitud DNI"
 when 
   notif:Notificacion(identInterlc:identNotificador, 
     		tipoNotificacion == tipoNotif.si )
    obj:ObtenerDNIUsuario(state == Objetivo.PENDING, objectReferenceId == identInterlc)
    fc:FocoUsuario(usuario == identInterlc, foco == obj)
    cu:UsuarioContexto(usuario == identInterlc)
 then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
  	tarea.ejecutar(identInterlc,conversacion.msg("solicitud2"));	
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
  	retract(notif);
end


rule "Mensaje confirmacion solicitud nombre"
 when 
   notif:Notificacion(identInterlc:identNotificador, 
     		tipoNotificacion == tipoNotif.si )
    obj:ObtenerNombreUsuario(state == Objetivo.PENDING, objectReferenceId == identInterlc)
    fc:FocoUsuario(usuario == identInterlc, foco == obj)
    cu:UsuarioContexto(usuario == identInterlc)
 then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
  	tarea.ejecutar(identInterlc,conversacion.msg("solicitud2"));	
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
  	retract(notif);
end


rule "Mensaje denegacion solicitud DNI"
 when 
   notif:Notificacion(identInterlc:identNotificador, 
     		tipoNotificacion == tipoNotif.no )
    obj:ObtenerDNIUsuario(state == Objetivo.PENDING, objectReferenceId == identInterlc)
    fc:FocoUsuario(usuario == identInterlc, foco == obj)
    cu:UsuarioContexto(usuario == identInterlc)
 then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
  	tarea.ejecutar(identInterlc,conversacion.msg("denegacion2"));	
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
  	retract(notif);
end


rule "Mensaje denegacion solicitud nombre"
 when 
   notif:Notificacion(identInterlc:identNotificador, 
     		tipoNotificacion == tipoNotif.no )
    obj:ObtenerNombreUsuario(state == Objetivo.PENDING, objectReferenceId == identInterlc)
    fc:FocoUsuario(usuario == identInterlc, foco == obj)
    cu:UsuarioContexto(usuario == identInterlc)
 then
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
  	tarea.ejecutar(identInterlc,conversacion.msg("denegacion2"));	
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
  	retract(notif);
end


rule "Recibir Objetivo primera vez"
 when 
 	notif:NotificacionObjetivo(identInterlc:identNotificador, tipoNotificacion == tipoNotif.objetivo, agente == "INIT")
 	//obj:DistribuirMensajes(state == Objetivo.SOLVING, objectReferenceId == identInterlc)
 	obj:IdentificarUsuario(state == Objetivo.SOLVED ,objectReferenceId == identInterlc )
    fc:FocoUsuario(usuario == identInterlc, foco == null)
    cu:UsuarioContexto(usuario == identInterlc)
 then
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
  	tarea.ejecutar(identInterlc, cu.getNombre()+ ", " + conversacion.msg("distribucion"));	
 	cu.actividad();
	fc.refocus();
	update(fc);
	update(cu);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
 	retract(notif);
end
/*
rule "Focalizacion de distribucion de mensajes"
 when
    obj:IdentificarUsuario(state == Objetivo.SOLVED ,user:objectReferenceId)
    cu:UsuarioContexto(usuario == user)
    fc:FocoUsuario(usuario == user)
 then
	obj.setSolving();
	Objetivo dm = new DistribuirMensajes();
	dm.setobjectReferenceId(user);
	fc.setFoco(dm);
	dm.setSolving();

  TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
     tarea.ejecutar(user, cu.getNombre()+ ", " + conversacion.msg("distribucion"));
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   update(obj);
   	insert(dm);
	update(fc);
end
*/

rule "Solicita Distribucion de mensajes paciente"
 when
    notif:Notificacion(identInterlc:identNotificador, 
    		(tipoNotificacion == tipoNotifPaciente.inicioPeticion ||
    		tipoNotificacion == tipoNotifPaciente.consulta) && 
    		tipoNotificacion != tipoNotif.saludo && tipoNotificacion != tipoNotif.despedida)
    //obj:DistribuirMensajes(state == Objetivo.SOLVING, objectReferenceId == identInterlc)
    fc:FocoUsuario(usuario == identInterlc)
    cu:UsuarioContexto(usuario == identInterlc)
 then
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
	cu.actividad();
    Tarea tarea = gestorTareas.crearTarea(Distribuir.class);
    tarea.ejecutar(identInterlc, notif, VocabularioGestionCitas.IdentAgenteAplicacionDialogoPaciente);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    retract(notif);
end

rule "Distribucion de mensajes paciente"
 when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion != tipoNotif.saludo && tipoNotificacion != tipoNotif.despedida)
    obj:DistribuirMensajesPaciente(state == Objetivo.PENDING, objectReferenceId == identInterlc)
    fc:FocoUsuario(usuario == identInterlc, foco == obj)
    cu:UsuarioContexto(usuario == identInterlc)
 then
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
	cu.actividad();
  	Tarea tarea = gestorTareas.crearTarea(Distribuir.class);
    tarea.ejecutar(identInterlc, notif, VocabularioGestionCitas.IdentAgenteAplicacionDialogoPaciente);
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   retract(notif);
end

rule "Recibir Objetivo Paciente"
 when 
 	notif:NotificacionObjetivo(identInterlc:identNotificador, agente == "PACIENTE")
 	//obj:DistribuirMensajes(state == Objetivo.SOLVING, objectReferenceId == identInterlc)
    fc:FocoUsuario(usuario == identInterlc)
    cu:UsuarioContexto(usuario == identInterlc)
 then
	Objetivo dp = new DistribuirMensajesPaciente();	
	dp.setobjectReferenceId(identInterlc);
	cu.actividad();
	fc.setFoco(dp);
	insert(dp);
	update(fc);
	update(cu);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
 	retract(notif);
end


rule "Solicita Distribucion de mensajes medico"
 when
    notif:Notificacion(identInterlc:identNotificador, 
    		tipoNotificacion == tipoNotifMedico.inicioAnulacion && 
    		tipoNotificacion != tipoNotif.saludo && tipoNotificacion != tipoNotif.despedida)
    //obj:DistribuirMensajes(state == Objetivo.SOLVING, objectReferenceId == identInterlc)
    fc:FocoUsuario(usuario == identInterlc)
    cu:UsuarioContexto(usuario == identInterlc)
 then
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
	cu.actividad();
    Tarea tarea = gestorTareas.crearTarea(Distribuir.class);
    tarea.ejecutar(identInterlc, notif, VocabularioGestionCitas.IdentAgenteAplicacionDialogoMedico);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
    retract(notif);
end

rule "Distribucion de mensajes medico"
 when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion != tipoNotif.saludo && tipoNotificacion != tipoNotif.despedida)
    obj:DistribuirMensajesMedico(state == Objetivo.PENDING, objectReferenceId == identInterlc)
    fc:FocoUsuario(usuario == identInterlc, foco == obj)
    cu:UsuarioContexto(usuario == identInterlc)
 then
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
	cu.actividad();
  	Tarea tarea = gestorTareas.crearTarea(Distribuir.class);
    tarea.ejecutar(identInterlc, notif, VocabularioGestionCitas.IdentAgenteAplicacionDialogoMedico);
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   retract(notif);
end

rule "Recibir Objetivo Medico"
 when 
 	notif:NotificacionObjetivo(identInterlc:identNotificador, agente == "MEDICO")
 	//obj:DistribuirMensajes(state == Objetivo.SOLVING, objectReferenceId == identInterlc)
    fc:FocoUsuario(usuario == identInterlc)
    cu:UsuarioContexto(usuario == identInterlc)
 then
	Objetivo dp = new DistribuirMensajesMedico();	
	dp.setobjectReferenceId(identInterlc);
	cu.actividad();
	fc.setFoco(dp);
	insert(dp);
	update(fc);
	update(cu);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
 	retract(notif);
end

rule "Recibir Objetivo Completado"
 when 
 	notif:NotificacionObjetivo(identInterlc:identNotificador, tipoNotificacion == tipoNotif.objetivo, agente == "RESET")
 	//obj:DistribuirMensajes(state == Objetivo.SOLVING, objectReferenceId == identInterlc)
    fc:FocoUsuario(usuario == identInterlc, foco != null)
    cu:UsuarioContexto(usuario == identInterlc)
 then
 	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
  	tarea.ejecutar(identInterlc, conversacion.msg("objetivoLogrado"));	
 	cu.actividad();
	fc.setFoco(null);
	update(fc);
	update(cu);
 	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
 	retract(notif);
end



rule "Detectar Inactividad"
	when 
	 cu:UsuarioContexto(user:usuario, inactividad(1) );
	 not( exists Inactividad(user == objectReferenceId ))
	 then
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
	Objetivo obb = new Inactividad();
	obb.setobjectReferenceId(user);
	insert( obb );
	cu.actividad();
  TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
  	if( cu.getNombre() == null){
  		tarea.ejecutar(cu.getUsuario(), conversacion.msg("inactividad"));
  	}else{
  		tarea.ejecutar(cu.getUsuario(), cu.getNombre() +", "+ conversacion.msg("inactividad"));
  	}
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Detectar Inactividad prolongada"
	when 
 	 cu:UsuarioContexto(user:usuario, inactividad(2) );
	 Inactividad(user == objectReferenceId, state == Objetivo.PENDING );
	 
	 then
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
  TareaSincrona tarea2 = gestorTareas.crearTareaSincrona(EliminarSessionUsuario.class);
     tarea2.ejecutar(cu.usuario);
  TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
     tarea.ejecutar(user,  conversacion.msg("despedida"));
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   retract( cu );
end

rule "Despedirse"
	when 
	 notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.despedida)
 	 cu:UsuarioContexto(usuario == identInterlc );
	 then
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
   Tarea tarea = gestorTareas.crearTarea(EliminarSessionUsuario.class);
     tarea.ejecutar(cu.usuario);
   TareaSincrona tarea2 = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
     tarea2.ejecutar(cu.usuario,  conversacion.msg("despedida"));
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   retract( cu );
   retract( notif );
end

rule "fechaAnterior"
	when 
	 notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.fechaAnterior)
	 cu:UsuarioContexto(usuario == identInterlc );
	 then
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
   TareaSincrona tarea2 = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
     tarea2.ejecutar(cu.usuario,  conversacion.msg("fechaAnterior"));
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   retract( notif );
end


	
	
rule "Timer Inactividad"
	timer ( int: 1m )
	when 
	 m:UsuarioContexto()
	 then
   update(m);
end
	

