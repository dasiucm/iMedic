import icaro.infraestructura.recursosOrganizacion.recursoTrazas.ItfUsoRecursoTrazas;
import icaro.infraestructura.recursosOrganizacion.recursoTrazas.imp.componentes.InfoTraza;
import icaro.infraestructura.entidadesBasicas.procesadorCognitivo.*;
import icaro.infraestructura.patronAgenteCognitivo.procesadorObjetivos.gestorTareas.ItfGestorTareas;
import icaro.infraestructura.entidadesBasicas.PerformativaUsuario;
import icaro.infraestructura.entidadesBasicas.comunicacion.*
import icaro.aplicaciones.agentes.AgenteAplicacionIdentificador.objetivos.*;
import icaro.aplicaciones.informacion.gestionCitas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionIdentificador.tareas.*;
import icaro.aplicaciones.agentes.AgenteAplicacionIdentificador.tools.*;

global ItfGestorTareas gestorTareas;
global ItfUsoRecursoTrazas recursoTrazas;
global String agentId;


rule "Creacion de los objectivos iniciales"
when 
then 
TareaSincrona tarea = gestorTareas.crearTareaSincrona(InicializarInfoWorkMem.class);
    tarea.ejecutar();
recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
end

rule "Saludo Inicial"
when
then
   // recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Se ejecuta la tarea : SolicitarDatosAcceso",InfoTraza.NivelTraza.debug));
     TareaSincrona tarea = gestorTareas.crearTareaSincrona(SaludoInicial.class);
     tarea.ejecutar(VocabularioGestionCitas.IdentRecursoComunicacionChat);
   // recursoTrazas.aceptaNuevaTraza(new InfoTraza(agentId,"Realizando el objetivo : "+obj.getgoalId()+"  Ejecutando la tarea : "+ tarea.getIdentTarea() ,InfoTraza.NivelTraza.debug));
   // recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Saludo inicial de usuario"
 when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.saludo)
    not( exists (UsuarioContexto(usuario == identInterlc )))
 then
 	UsuarioContexto cu = new UsuarioContexto();
 	cu.usuario = identInterlc;
 	insert( cu );
 	Objetivo id = new IdentificarUsuario();
 	id.setobjectReferenceId(identInterlc);
 	insert( id );
 //	Objetivo fd = new CrearMemoriaUsuario();
 //	fd.setobjectReferenceId(identInterlc);
 //	insert(fd);
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tarea.ejecutar(identInterlc,conversacion.saludoInicial);
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
    retract(notif);
end

rule "Resaludar"
 when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.saludo)
   	cu:UsuarioContexto(usuario == identInterlc)
 then
  	 TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
     tarea.ejecutar(identInterlc,conversacion.resaludo1);
     recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName()); 
     cu.actividad();
     retract(notif);
end


rule "Regla de focalizacion de obtener nombre"
 when
 	obj:IdentificarUsuario(state == Objetivo.PENDING ,user:objectReferenceId)
 then
  	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
  	obj.setSolving();
  	TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
    tarea.ejecutar(user,conversacion.SolicitarNombre2);
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	update(obj);
end

rule "Regla de obtencion de nombre"
 when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.nombre, msgg:mensajeNotificacion )
    obj:IdentificarUsuario(state == Objetivo.SOLVING, objectReferenceId == identInterlc)
    cu:UsuarioContexto(usuario == identInterlc)
 then
 	obj.setSolved();
 	cu.setNombre(msgg);
 	Objetivo nobj = new ObtenerDNIUsuario();
 	nobj.setobjectReferenceId(identInterlc);
 	insert( nobj );
 	cu.actividad();
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(SolicitarNombre.class);
    tarea.ejecutar(identInterlc,conversacion.obtencionNombre1,msgg);
   	recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   	update(obj);
   	retract(notif);
end


rule "Regla de focalizacion de obtener DNI"
 when
 	obj:ObtenerDNIUsuario(state == Objetivo.PENDING ,user:objectReferenceId)
 	cu:UsuarioContexto(usuario == user)   
 then

  recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
	obj.setSolving();	

  TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
     tarea.ejecutar(user, cu.getNombre()+ ", " + conversacion.SolicitarDNI1);
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   update(obj);
end

rule "Regla de obtencion de dni"
 when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.dni, msgg:mensajeNotificacion )
    obj:ObtenerDNIUsuario(state == Objetivo.SOLVING, objectReferenceId == identInterlc)
    cu:UsuarioContexto(usuario == identInterlc)
 then
 	obj.setSolved();
    recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
    cu.setDNI(msgg);
    cu.actividad();
    Objetivo dm = new DistribuirMensajes();
    dm.setobjectReferenceId(identInterlc);
    insert( dm );
    TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
     tarea.ejecutar(identInterlc,conversacion.obtencionDNI1);
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   retract(notif);
   update(obj);
end

rule "Focalizacion de distribucion de mensajes"
 when
    
    obj:DistribuirMensajes(state == Objetivo.PENDING, identInterlc:objectReferenceId )
    cu:UsuarioContexto(usuario == identInterlc)
    
 then
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
	obj.setSolving();
  TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
     tarea.ejecutar(identInterlc, cu.getNombre()+ ", " + conversacion.distribucion1);
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   update(obj);
end

rule "Distribucion de mensajes"
 when
    notif:Notificacion(identInterlc:identNotificador, tipoNotificacion != tipoNotif.saludo && tipoNotificacion != tipoNotif.despedida)
    obj:DistribuirMensajes(state == Objetivo.SOLVING, objectReferenceId == identInterlc)
     cu:UsuarioContexto(usuario == identInterlc)
 then
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
	cu.actividad();
  Tarea tarea = gestorTareas.crearTarea(Distribuir.class);
     tarea.ejecutar(identInterlc, notif);
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   retract(notif);
end

rule "Detectar Inactividad"
	when 
	 cu:UsuarioContexto(user:usuario, inactividad(1) );
	 not( exists Inactividad(user == objectReferenceId ))
	 then
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
	Objetivo obb = new Inactividad();
	obb.setobjectReferenceId(user);
	insert( obb );
	cu.actividad();
  TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
     tarea.ejecutar(cu.getUsuario(), cu.getNombre() +", "+ conversacion.inactividad1);
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
end

rule "Detectar Inactividad prolongada"
	when 
 	 cu:UsuarioContexto(user:usuario, inactividad(2) );
	 Inactividad(user == objectReferenceId, state == Objetivo.PENDING );
	 
	 then
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
	//m.eliminarUsuario(usuario);
  TareaSincrona tarea2 = gestorTareas.crearTareaSincrona(EliminarSessionUsuario.class);
     tarea2.ejecutar(cu.usuario);
  TareaSincrona tarea = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
     tarea.ejecutar(user,  conversacion.despedida1);
   
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   retract( cu );
   //update(m);
end

rule "Despedirse"
	when 
	 notif:Notificacion(identInterlc:identNotificador, tipoNotificacion == tipoNotif.despedida)
 	 cu:UsuarioContexto(usuario == identInterlc );
	 then
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTARA LA REGLA: " + drools.getRule().getName());
	//m.eliminarUsuario(usuario);
   TareaSincrona tarea = gestorTareas.crearTareaSincrona(EliminarSessionUsuario.class);
     tarea.ejecutar(cu.usuario);
   TareaSincrona tarea2 = gestorTareas.crearTareaSincrona(MensajeGenerico.class);
     tarea2.ejecutar(cu.usuario,  conversacion.despedida1);
   recursoTrazas.aceptaNuevaTrazaEjecReglas(agentId," EJECUTO LA REGLA: " + drools.getRule().getName());
   retract( cu );
   retract( notif );
   //update(m);
end




	
	
rule "Timer Inactividad"
	timer ( int: 1m )
	when 
	 m:UsuarioContexto()
	 then
   update(m);
end
	

